1. Locations = Posts     
    
    attributes:
    user
    category
    title 
    content 

        all are strings 
    rails g scaffold location title content user category

2. Then: 
rails db:create 
rails db:migrate 

3. Added gems:
gem 'bcrypt', '~> 3.1.7'
gem 'pry' 


4. Created my db: 
- Used locations attributes below:
t.string :title
t.string :content
t.string :user
t.string :category

Locations.create(attribute: 'value')
- to seed the above db => rails db:seed 

5. Congifigure rails so that you can make a call from frontend making api accessible through react app: 
- go to Gemfile, uncomment gem 'rack-core'
- then run bundle update 

6. go to initializer folder, cors.rb file 
- uncomment Rails.application.
- change origins '*' => the * means all, so that all Frontend calls can make a call to this Backend 

7. create github repository MyWeather2 
- make sure when you commit, do it from the main repo MyWeather2, not client or server side repos! 

8. working on the Client_side now, stay on the client_side directory:  
- npm i react-redux 

@36:25, we started to setting redux store 

9. start from index.js 

- npm i redux-thunk 
- npm i redux 
- do 8 main imports =>  
     React from 'react', 
     ReactDom from 'react-dom', 
     {createStore} from 'redux', 
     {Provider} from 'react-redux', 
     thunk from 'redux-thunk'
     { composeWithDevTools } from 'redux-devtools-extension' => installation for this one is: 
     npm i redux-devtools-extension
     App from ''
     rootReducer from ''

@42:31, finished store setup 
- now, we creating rootReducer, usersReducer, locationsReducer
- the reducer needs to pass in 2 arguments; 1. state = [], 2. action 
- inside the reducer we use Switch statement and it checks for (action.type)

@42:52, we can't pass in multiple reducers to createStore, therefore, we need to combine our reducers into rootReducer, then, pass that bundle into createStore so it becomes aware of all our app state. 
So, we created usersReducer and locationsReducer and we combined them in combineReducer at the rootReducer.js file. 

@47:30, finished our reducers combining into rootReducer 
- now, working on App.js - created a functional component, with <div> hello world - and check if its rendering anything on the client side?

To run client side file: 
=> npm start 

* avoid setting the initial state to an object { } as that will show nesting when checking the redux state on inspection, instead, just do; state = []

@50:30, we created LocationsContainer, this is a class component where all locations related data + methods - will be mounted in App.js 

@52:57, we finished redux setup by finishing creating the: 
1. index.js 
2. reducers; rootReducer, locationsReducer, usersReducer
3. components; App.js and LocationsContainer
- The only thing left here, are the actions and the cases within the Switch statement 

@52:29, we created LocationsActions 

@58:23, make sure you stop and restart the rails server after making componentDidMount and adding this.props.fetchLocations to it. 

@1:05:51, we finished LocationForm and mounted it on LocationContainer.js 

@1:14:26, so far, we created; 
1. the actions where its now give a GET and POST requests, 
2. the reducers which are now handling the redux store, 
3. we have 1 container; LocationsForm which is mounting the Locations container, and making a fetch request. 

@1:15:40, Routing, we creating: 
1. home page = root page 
2. about page 
3. index page = where you could go to and get all the locations 

To setup routing, go to index.js 
1. install react router dom 
    => npm i react-router-dom 
    
2. import { BrowserRouter }

Remember, new update for "react-router-dom": "^6.0.2", now:

1. the import has to be: 
        import { Routes ,Route } from 'react-router-dom'; 
2. Switch is replaced with Route, 
3. component is replaced by element, 
4. {Home} is replaced by {<Home />}, 

To start the app postgresql server: 
sudo service postgresql start


For Google OAuth authentication 
1. npm install react-google-login 
2. on App.js file, import GoogleLogin from 'react-google-login' 
3. inside <div> <GoogleLogin/> </div>

For git commands to check: 
check this website for best shell command: https://explainshell.com/explain?cmd=ls+-a 
1. list all directory content 
    => ls -a 
2. remove all files and directories forcefully and unlink the files from git 
    => rm -rf .git 
3. forcefully remove node_modules 
    => rm -rf node_modules

Jennifer Hansen link - 5/4 FT Rails login with Google Oauth
https://www.youtube.com/watch?v=9pD0uXLI5uE

1. setting User for the Google Oauth - all attributes are 'strings'

User 

- Attributes: 
username
email 
password_digest
uid 
provider


  => rails g resource User username email password:digest uid provider 
2. rails db:migrate 

Gemfile - add few gems 
1. gem 'bcrypt', '~> 3.1.7' - this is to use secure password system 
2. gem 'omniauth' 
3. gem 'omniauth-rails-csrf_protection' - this gem works with omniauth to make sure that we don't have the vulnerability in our code 
4. gem 'omniauth-google-oauth2' 

dotenv gem - this is to be put under group :development, :test do
2. gem 'dotenv-rails' 

*After adding all these gems do - bundle 

env :
1. create env file in the directory of server side:
    => touch .env 
2. In gitignore file, # Ignore uploaded files in development:
    => add .env 
This is to unsure that this file does not get pushed to github. 

We added the GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET to the .env file. 

We set the middleware which is going to contact Google for us:
1. under config folder, initializer, add omniauth.rb file 
2. added the code below: 

Rails.application.config.middleware.use OmniAuth::Builder do
    provider :google_oauth2, ENV['GOOGLE_CLIENT_ID'],
    ENV['GOOGLE_CLIENT_SECRET']
end 

A fresh beginning with Ayson 
https://www.youtube.com/watch?v=PBi877w8P44

1. implement a sign up => responsibility of the users controller 
2. a login and logout => we storing a new key-value pair inside of our existing sessions hash 

The gem's installed for Rails authentication are: 
gem 'bcrypt', '~> 3.1.7' # to authenticate and store encrypted version of user's password 
gem 'pry' 

Create sessions controller only with 3 actions (methods) new, create, and destroy:
    => rails g resource controller Sessions new create destroy 

For Rails API app, you need to add the below codes in the application.rb 
    config.middleware.use ActionDispatch::Cookies
    config.middleware.use ActionDispatch::Session::CookieStore


The above link is ideal for Backend authenticator 

Frontend Google authenticator 
https://www.youtube.com/watch?v=MqczHS3Z2bc 
https://manage.auth0.com/dashboard/au/dev-js90blpn/applications/vjszO4ak3YgfgJrj1pRdSCZexUh0AedB/settings


Frontend Auth0 authenticator 
https://www.youtube.com/watch?v=GGGjnBkN8xk


Rails.application.credentials.secret_key_base 


https://www.youtube.com/watch?v=_rdNv5ijzrk&list=PLgYiyoyNPrv_yNp5Pzsx0A3gQ8-tfg66j&index=3

curl --header "Content-Type: application/json" \
--request POST --data '{"user": {"email": "swimhj_81@yahoo.com", "password": "Jeff@81"}}'\
http://localhost:3000/sessions


A fresh beginning with Ayson in Rails Authentication 
https://www.youtube.com/watch?v=EUOLxgaxCu4


# Albert JWT authentication: 

# login or check the new user you just added: 

fetch('http://localhost:3000/login', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json'
  },
  body: JSON.stringify({
    user: {
      email: "swimhj_81@yahoo.com",
      password: "Jeff@1981"
    }
  })
})
  .then(r => r.json())
  .then(r => {
    console.log(r)
    localStorage.setItem('user', r.user)
    localStorage.setItem('jwt', r.jwt)
  })



  fetch('http://localhost:3000/login', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json'
  },
  body: JSON.stringify({
    user: {
      email: "swimhj_81@yahoo.com",
      username: "Jeff",
      password: "Jeff@1981"
    }
  })
})
  .then(r => r.json())
  .then(r => console.log(r))

  or in the last line, if you want to store that in the localStorage and console log:
  => .then(r => {
    console.log(r)
    localStorage.setItem('user', JSON.stringify(r.user))
    localStorage.setItem('jwt', r.jwt)
  })

# Below, we changed:
1. login => locations - and 
2. method: get instead of post 
3. added, Authorization: 'eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxfQ.iYpgIJJsIa8qdQPkvPVxwZO6o6prN8i3vVW3glRLNR4' - after Accept: 


fetch('http://localhost:3000/locations', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json',
    Authorization: `Bearer ${localStorage.getItem('jwt')}`
  }
})
  .then(r => r.json())
  .then(r => {
    console.log(r)
  })

  # to check your jwt on https://jwt.io/ website: 
  1. put your jwt there - 
  2. then add your secret key base on Rails c using: Rails.application.credentials.secret_key_base

# to save the jwt on the browser: 
  localStorage.setItem("JWT", "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxfQ.iYpgIJJsIa8qdQPkvPVxwZO6o6prN8i3vVW3glRLNR4")

# to delete the jwt from the browser: 
  localStorage.removeItem("JWT")

To reset rails migration:
=> rake db:migrate VERSION=0 

Ruby on Rails queries 

rails.console --sandbox 

# to delete a record in rails console: 
User.where(:attribute=>"value").first.delete
Or 
User.find(1).destroy 

# Postgresql server issues can't run by using "sudo service postgresql start" - solution was restarting the server using:
=> sudo service postgresql restart

# if you changed your seeded data and wanted to reset the previous migrate and ended up with an error like the now below:
StandardError: An error has occurred, this and all later migrations canceled:
PG::DuplicateTable: ERROR:  relation "locations" already exists
- The solution for the above is: 
=> rake db:drop db:create db:migrate
